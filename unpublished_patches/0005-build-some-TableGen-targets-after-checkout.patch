From e6142f12928bf407f70072b4d46ab26e01b5e442 Mon Sep 17 00:00:00 2001
From: Johannes Altmanninger <aclopte@gmail.com>
Date: Mon, 21 Aug 2017 10:04:24 +0200
Subject: [PATCH 5/5] build some TableGen targets after checkout

---
 tools/clang-diff/ClangDiff.cpp | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/tools/clang-diff/ClangDiff.cpp b/tools/clang-diff/ClangDiff.cpp
index d5198612bb..5f874c34e1 100644
--- a/tools/clang-diff/ClangDiff.cpp
+++ b/tools/clang-diff/ClangDiff.cpp
@@ -1,665 +1,674 @@
 //===- ClangDiff.cpp - compare source files by AST nodes ------*- C++ -*- -===//
 //
 //                     The LLVM Compiler Infrastructure
 //
 // This file is distributed under the University of Illinois Open Source
 // License. See LICENSE.TXT for details.
 //
 //===----------------------------------------------------------------------===//
 //
 // This file implements a tool for syntax tree based comparison using
 // Tooling/ASTDiff.
 //
 //===----------------------------------------------------------------------===//
 
 #include "clang/Tooling/ASTDiff/ASTDiff.h"
 #include "clang/Tooling/ASTDiff/ASTPatch.h"
 #include "clang/Tooling/CommonOptionsParser.h"
 #include "clang/Tooling/Tooling.h"
 #include "llvm/Support/CommandLine.h"
 #include "llvm/Support/Program.h"
 
 using namespace llvm;
 using namespace clang;
 using namespace clang::tooling;
 
 static cl::OptionCategory ClangDiffCategory("clang-diff options");
 
 static cl::opt<bool>
     ASTDump("ast-dump",
             cl::desc("Print the internal representation of the AST."),
             cl::init(false), cl::cat(ClangDiffCategory));
 
 static cl::opt<bool> ASTDumpJson(
     "ast-dump-json",
     cl::desc("Print the internal representation of the AST as JSON."),
     cl::init(false), cl::cat(ClangDiffCategory));
 
 static cl::opt<bool> PrintMatches("dump-matches",
                                   cl::desc("Print the matched nodes."),
                                   cl::init(false), cl::cat(ClangDiffCategory));
 
 static cl::opt<bool> HtmlDiff("html",
                               cl::desc("Output a side-by-side diff in HTML."),
                               cl::init(false), cl::cat(ClangDiffCategory));
 
 static cl::opt<std::string>
     Patch("patch",
           cl::desc("Try to apply the edit actions between the two input "
                    "files to the specified target."),
           cl::desc("<target>"), cl::cat(ClangDiffCategory));
 
 static cl::opt<std::string> SourcePath(cl::Positional, cl::desc("<source>"),
                                        cl::Required,
                                        cl::cat(ClangDiffCategory));
 
 static cl::opt<std::string> DestinationPath(cl::Positional,
                                             cl::desc("<destination>"),
                                             cl::Optional,
                                             cl::cat(ClangDiffCategory));
 
 static cl::opt<std::string> StopAfter("stop-diff-after",
                                       cl::desc("<topdown|bottomup>"),
                                       cl::Optional, cl::init(""),
                                       cl::cat(ClangDiffCategory));
 
 static cl::opt<std::string>
     GitRevision("git-rev",
                 cl::desc("Compare a file between a revision range (<rev>..HEAD "
                          "is assumed if a single revision is given."),
                 cl::Optional, cl::init(""), cl::cat(ClangDiffCategory));
 
 static cl::opt<int> MaxSize("s", cl::desc("<maxsize>"), cl::Optional,
                             cl::init(-1), cl::cat(ClangDiffCategory));
 
 static cl::opt<std::string> BuildPath("p", cl::desc("Build path"), cl::init(""),
                                       cl::Optional, cl::cat(ClangDiffCategory));
 
 static cl::list<std::string> ArgsAfter(
     "extra-arg",
     cl::desc("Additional argument to append to the compiler command line"),
     cl::cat(ClangDiffCategory));
 
 static cl::list<std::string> ArgsBefore(
     "extra-arg-before",
     cl::desc("Additional argument to prepend to the compiler command line"),
     cl::cat(ClangDiffCategory));
 
 static void addExtraArgs(std::unique_ptr<CompilationDatabase> &Compilations) {
   if (!Compilations)
     return;
   auto AdjustingCompilations =
       llvm::make_unique<ArgumentsAdjustingCompilations>(
           std::move(Compilations));
   AdjustingCompilations->appendArgumentsAdjuster(
       getInsertArgumentAdjuster(ArgsBefore, ArgumentInsertPosition::BEGIN));
   AdjustingCompilations->appendArgumentsAdjuster(
       getInsertArgumentAdjuster(ArgsAfter, ArgumentInsertPosition::END));
   Compilations = std::move(AdjustingCompilations);
 }
 
 static std::unique_ptr<ASTUnit>
 getAST(const std::unique_ptr<CompilationDatabase> &CommonCompilations,
        const StringRef Filename) {
   std::string ErrorMessage;
   std::unique_ptr<CompilationDatabase> Compilations;
   if (!CommonCompilations) {
     Compilations = CompilationDatabase::autoDetectFromSource(
         BuildPath.empty() ? Filename : BuildPath, ErrorMessage);
     if (!Compilations) {
       llvm::errs()
           << "Error while trying to load a compilation database, running "
              "without flags.\n"
           << ErrorMessage;
       Compilations =
           llvm::make_unique<clang::tooling::FixedCompilationDatabase>(
               ".", std::vector<std::string>());
     }
   }
   addExtraArgs(Compilations);
   std::array<std::string, 1> Files = {{Filename}};
   ClangTool Tool(Compilations ? *Compilations : *CommonCompilations, Files);
   std::vector<std::unique_ptr<ASTUnit>> ASTs;
   Tool.buildASTs(ASTs);
   if (ASTs.size() != Files.size())
     return nullptr;
   return std::move(ASTs[0]);
 }
 
 static char hexdigit(int N) { return N &= 0xf, N + (N < 10 ? '0' : 'a' - 10); }
 
 static const char HtmlDiffHeader[] = R"(
 <html>
 <head>
 <meta charset='utf-8'/>
 <style>
 span.d { color: red; }
 span.u { color: #cc00cc; }
 span.i { color: green; }
 span.m { font-weight: bold; }
 span   { font-weight: normal; color: black; }
 span.tree { display: none; }
 div.code {
   width: 48%;
   height: 98%;
   overflow: scroll;
   float: left;
   padding: 0 0 0.5% 0.5%;
   border: solid 2px LightGrey;
   border-radius: 5px;
 }
 </style>
 </head>
 <script type='text/javascript'>
 highlightStack = []
 function clearHighlight() {
   while (highlightStack.length) {
     var [l, r] = highlightStack.pop()
     document.getElementById(l).style.backgroundColor = 'inherit'
     if (r[1] != '-')
       document.getElementById(r).style.backgroundColor = 'inherit'
   }
 }
 function highlight(event) {
   var elem = event.target
   while (!elem.attributes.hasOwnProperty('id'))
     elem = elem.parentElement
   var id = elem['id']
   doHighlight(id)
 }
 function doHighlight(id) {
   clearHighlight()
   source = document.getElementById(id)
   if (!source.attributes['tid'])
     return
   var mapped = source
   while (mapped && mapped.parentElement &&
     (!mapped.classList.contains('node') || mapped.attributes['tid'].value.substr(1) === '-1'))
     mapped = mapped.parentElement
   var tid = null, target = null
   if (mapped) {
     tid = mapped.attributes['tid'].value
     target = document.getElementById(tid)
   }
   if (source.parentElement && source.parentElement.classList.contains('code'))
     return
   source.style.backgroundColor = 'lightgrey'
   source.scrollIntoView()
   if (target) {
     if (mapped === source)
       target.style.backgroundColor = 'lightgrey'
     target.scrollIntoView()
   }
   highlightStack.push([id, tid])
   location.hash = '#' + id
 }
 function scrollToBoth() {
   doHighlight(location.hash.substr(1))
 }
 function changed(elem) {
   return elem.classList.contains('node') && elem.classList.length > 1
 }
 function nextChangedNode(prefix, increment, number) {
   do {
     number += increment
     var elem = document.getElementById(prefix + number)
   } while(elem && !changed(elem))
   return elem ? number : null
 }
 function toggle() {
   var divs = document.querySelectorAll('.src')
   var dsrc  = divs[0].style.display === 'none' ? 'inline' : 'none'
   var dtree = divs[0].style.display === 'none' ? 'none' : 'inline'
   ;[].forEach.call(document.querySelectorAll('.tree'), function (el) { el.style.display = dtree })
   ;[].forEach.call(document.querySelectorAll('.src'),  function (el) { el.style.display = dsrc })
 }
 function handleKey(e) {
   if (e.code === "KeyX")
     return scrollToBoth()
   if (e.code === "KeyT")
     return toggle()
   var down = e.code === "KeyJ"
   var up = e.code === "KeyK"
   if (!down && !up)
     return
   var id = highlightStack[0] ? highlightStack[0][0] : 'R0'
   var oldelem = document.getElementById(id)
   var number = parseInt(id.substr(1))
   var increment = down ? 1 : -1
   var lastnumber = number
   var prefix = id[0]
   do {
     number = nextChangedNode(prefix, increment, number)
     var elem = document.getElementById(prefix + number)
     if (up && elem) {
       while (elem.parentElement && changed(elem.parentElement))
         elem = elem.parentElement
       number = elem.id.substr(1)
     }
   } while ((down && id !== 'R0' && oldelem.contains(elem)))
   if (!number)
     number = lastnumber
   elem = document.getElementById(prefix + number)
   doHighlight(prefix + number)
 }
 window.onload = scrollToBoth
 window.onkeydown = handleKey
 </script>
 <body>
 <div onclick='highlight(event)'>
 )";
 
 static void printHtml(raw_ostream &OS, char C) {
   switch (C) {
   case '&':
     OS << "&amp;";
     break;
   case '<':
     OS << "&lt;";
     break;
   case '>':
     OS << "&gt;";
     break;
   case '\'':
     OS << "&#x27;";
     break;
   case '"':
     OS << "&quot;";
     break;
   default:
     OS << C;
   }
 }
 
 static void printHtml(raw_ostream &OS, const StringRef Str) {
   for (char C : Str)
     printHtml(OS, C);
 }
 
 static std::string getChangeKindClasses(diff::ChangeKind Kind) {
   switch (Kind) {
   case diff::None:
     return "";
   case diff::Delete:
     return " d";
   case diff::Update:
     return " u";
   case diff::Insert:
     return " i";
   case diff::Move:
     return " m";
   case diff::UpdateMove:
     return " u m";
   }
   llvm_unreachable("Invalid enumeration value.");
 }
 
 static void printChangeKind(raw_ostream &OS, diff::ChangeKind Kind) {
   switch (Kind) {
   case diff::None:
     break;
   case diff::Delete:
     OS << "Delete";
     break;
   case diff::Update:
     OS << "Update";
     break;
   case diff::Insert:
     OS << "Insert";
     break;
   case diff::Move:
     OS << "Move";
     break;
   case diff::UpdateMove:
     OS << "Update and Move";
     break;
   }
 }
 
 static unsigned printHtmlForNode(raw_ostream &OS, const diff::ASTDiff &Diff,
                                  diff::SyntaxTree &Tree, bool IsLeft,
                                  diff::NodeId Id, unsigned Offset,
                                  unsigned Limit = UINT_MAX) {
   const diff::Node &Node = Tree.getNode(Id);
   char MyTag, OtherTag;
   diff::NodeId LeftId, RightId;
   diff::NodeId TargetId = Diff.getMapped(Tree, Id);
   if (IsLeft) {
     MyTag = 'L';
     OtherTag = 'R';
     LeftId = Id;
     RightId = TargetId;
   } else {
     MyTag = 'R';
     OtherTag = 'L';
     LeftId = TargetId;
     RightId = Id;
   }
   unsigned Begin, End;
   std::tie(Begin, End) = Tree.getSourceRangeOffsets(Node);
   const SourceManager &SrcMgr = Tree.getASTContext().getSourceManager();
   auto Code = SrcMgr.getBuffer(SrcMgr.getMainFileID())->getBuffer();
   diff::ChangeKind ParentChange = diff::None;
   if (Node.Parent.isValid())
     ParentChange = Tree.getNode(Node.Parent).Change;
   OS << "<span class='src" << getChangeKindClasses(ParentChange) << "'>";
   for (; Offset < Begin; ++Offset)
     printHtml(OS, Code[Offset]);
   OS << "</span>";
   OS << "<span id='" << MyTag << Id << "' "
      << "tid='" << OtherTag << TargetId << "' ";
   OS << "title='";
   printChangeKind(OS, Node.Change);
   if (Node.Change != diff::None)
     OS << " ";
   printHtml(OS, Node.getTypeLabel());
   OS << "\n" << LeftId << " -> " << RightId;
   std::string ChangeClasses = getChangeKindClasses(Node.Change);
   OS << "' class='node" << ChangeClasses << "'>";
 
   OS << "<span class='tree" << ChangeClasses << "'>";
   for (int Indent = 0; Indent < Node.Depth; ++Indent)
     OS << " ";
   OS << Node.getTypeLabel();
   std::string Value = Tree.getNodeValue(Node);
   if (!Value.empty())
     OS << ": ", printHtml(OS, Value);
   OS << "\n</span>";
 
   for (diff::NodeId Child : Node.Children)
     Offset = printHtmlForNode(OS, Diff, Tree, IsLeft, Child, Offset);
 
   OS << "<span class='src" << ChangeClasses << "'>";
   for (; Offset < End && Offset < Limit; ++Offset)
     printHtml(OS, Code[Offset]);
   if (Id == Tree.getRootId()) {
     End = Code.size();
     for (; Offset < End; ++Offset)
       printHtml(OS, Code[Offset]);
   }
   OS << "</span>";
 
   OS << "</span>";
   return Offset;
 }
 
 static void printJsonString(raw_ostream &OS, const StringRef Str) {
   for (signed char C : Str) {
     switch (C) {
     case '"':
       OS << R"(\")";
       break;
     case '\\':
       OS << R"(\\)";
       break;
     case '\n':
       OS << R"(\n)";
       break;
     case '\t':
       OS << R"(\t)";
       break;
     default:
       if ('\x00' <= C && C <= '\x1f') {
         OS << R"(\u00)" << hexdigit(C >> 4) << hexdigit(C);
       } else {
         OS << C;
       }
     }
   }
 }
 
 static void printNodeAttributes(raw_ostream &OS, diff::SyntaxTree &Tree,
                                 diff::NodeId Id) {
   const diff::Node &N = Tree.getNode(Id);
   OS << R"("id":)" << int(Id);
   OS << R"(,"type":")" << N.getTypeLabel() << '"';
   auto Offsets = Tree.getSourceRangeOffsets(N);
   OS << R"(,"begin":)" << Offsets.first;
   OS << R"(,"end":)" << Offsets.second;
   std::string Value = Tree.getNodeValue(N);
   if (!Value.empty()) {
     OS << R"(,"value":")";
     printJsonString(OS, Value);
     OS << '"';
   }
 }
 
 static void printNodeAsJson(raw_ostream &OS, diff::SyntaxTree &Tree,
                             diff::NodeId Id) {
   const diff::Node &N = Tree.getNode(Id);
   OS << "{";
   printNodeAttributes(OS, Tree, Id);
   auto Identifier = N.getIdentifier();
   auto QualifiedIdentifier = N.getQualifiedIdentifier();
   if (Identifier) {
     OS << R"(,"identifier":")";
     printJsonString(OS, *Identifier);
     OS << R"(")";
     if (QualifiedIdentifier && *Identifier != *QualifiedIdentifier) {
       OS << R"(,"qualified_identifier":")";
       printJsonString(OS, *QualifiedIdentifier);
       OS << R"(")";
     }
   }
   OS << R"(,"children":[)";
   if (N.Children.size() > 0) {
     printNodeAsJson(OS, Tree, N.Children[0]);
     for (size_t I = 1, E = N.Children.size(); I < E; ++I) {
       OS << ",";
       printNodeAsJson(OS, Tree, N.Children[I]);
     }
   }
   OS << "]}";
 }
 
 static void printNode(raw_ostream &OS, diff::SyntaxTree &Tree,
                       diff::NodeId Id) {
   if (Id.isInvalid()) {
     OS << "None";
     return;
   }
   OS << Tree.getNode(Id).getTypeLabel();
   std::string Value = Tree.getNodeValue(Id);
   if (!Value.empty())
     OS << ": " << Value;
   OS << "(" << Id << ")";
 }
 
 static void printTree(raw_ostream &OS, diff::SyntaxTree &Tree) {
   for (diff::NodeId Id : Tree) {
     for (int I = 0; I < Tree.getNode(Id).Depth; ++I)
       OS << " ";
     printNode(OS, Tree, Id);
     OS << "\n";
   }
 }
 
 static void printDstChange(raw_ostream &OS, diff::ASTDiff &Diff,
                            diff::SyntaxTree &SrcTree, diff::SyntaxTree &DstTree,
                            diff::NodeId Dst) {
   const diff::Node &DstNode = DstTree.getNode(Dst);
   diff::NodeId Src = Diff.getMapped(DstTree, Dst);
   printChangeKind(OS, DstNode.Change);
   switch (DstNode.Change) {
   case diff::None:
     break;
   case diff::Delete:
     llvm_unreachable("The destination tree can't have deletions.");
   case diff::Update:
     OS << " ";
     printNode(OS, SrcTree, Src);
     OS << " to " << DstTree.getNodeValue(Dst) << "\n";
     break;
   case diff::Insert:
   case diff::Move:
   case diff::UpdateMove:
     OS << " ";
     printNode(OS, DstTree, Dst);
     OS << " into ";
     printNode(OS, DstTree, DstNode.Parent);
     OS << " at " << DstTree.findPositionInParent(Dst) << "\n";
     break;
   }
 }
 
 std::string Exec(const char *Command) {
   char Buffer[128];
   std::string Result;
   std::shared_ptr<FILE> Pipe(popen(Command, "r"), pclose);
   if (!Pipe)
     return Result;
   while (!feof(Pipe.get())) {
     if (fgets(Buffer, 128, Pipe.get()) != nullptr)
       Result += Buffer;
   }
   return Result;
 }
 
 int main(int argc, const char **argv) {
   std::string ErrorMessage;
   std::unique_ptr<CompilationDatabase> CommonCompilations =
       FixedCompilationDatabase::loadFromCommandLine(argc, argv, ErrorMessage);
   if (!CommonCompilations && !ErrorMessage.empty())
     llvm::errs() << ErrorMessage;
   cl::HideUnrelatedOptions(ClangDiffCategory);
   if (!cl::ParseCommandLineOptions(argc, argv)) {
     cl::PrintOptionValues();
     return 1;
   }
 
   addExtraArgs(CommonCompilations);
 
   if (ASTDump || ASTDumpJson) {
     if (!DestinationPath.empty()) {
       llvm::errs() << "Error: Please specify exactly one filename.\n";
       return 1;
     }
     std::unique_ptr<ASTUnit> AST = getAST(CommonCompilations, SourcePath);
     if (!AST)
       return 1;
     diff::SyntaxTree Tree(*AST);
     if (ASTDump) {
       printTree(llvm::outs(), Tree);
       return 0;
     }
     llvm::outs() << R"({"filename":")";
     printJsonString(llvm::outs(), SourcePath);
     llvm::outs() << R"(","root":)";
     printNodeAsJson(llvm::outs(), Tree, Tree.getRootId());
     llvm::outs() << "}\n";
     return 0;
   }
 
   if (DestinationPath.empty() && GitRevision.empty()) {
     llvm::errs() << "Error: Exactly two paths are required.\n";
     return 1;
   }
 
   std::unique_ptr<ASTUnit> Src, Dst;
 
   if (!GitRevision.empty()) {
     std::string Git;
     auto ErrorOrGit = llvm::sys::findProgramByName("git");
     if (!ErrorOrGit) {
       llvm::errs() << "Error: Could not find git executable.\n";
       return 1;
     }
     Git = ErrorOrGit.get();
     if (GitRevision.find("..") == std::string::npos)
       GitRevision += "..HEAD";
     size_t Dots = GitRevision.find("..");
     GitRevision.replace(Dots, 2, "  ");
     GitRevision += " HEAD";
     std::string RevParseCommand = "git rev-parse " + GitRevision;
     std::string Revisions = Exec(RevParseCommand.data());
     std::transform(Revisions.begin(), Revisions.end(), Revisions.begin(),
                    [](char C) { return C == '\n' ? '\0' : C; });
     auto SrcRev = Revisions.data();
     size_t Offset = Revisions.find('\0') + 1;
     auto DstRev = Revisions.data() + Offset;
-    auto UserRev = Revisions.data() + Revisions.find('\0', Offset) + 1;
+    /* auto UserRev = Revisions.data() + Revisions.find('\0', Offset) + 1; */
     const char *CheckoutCommand[] = {"git", "checkout", nullptr, nullptr};
     auto Checkout = [&](const char *Rev) {
       CheckoutCommand[2] = Rev;
       if (llvm::sys::ExecuteAndWait(Git, CheckoutCommand)) {
         llvm::errs() << "Error: Failed to checkout " << Rev << "\n";
         return false;
       }
       return true;
     };
+    auto Prep = []() {
+      Exec("perf stat --metric-only ninja -C ../debug3 build.ninja intrinsics_gen "
+           "AttributeCompatFuncTableGen "
+           "X86CommonTableGen AttributeCompatFuncTableGen CvtResTableGen "
+           "DllOptionsTableGen LibOptionsTableGen MtTableGen OptsTestTableGen "
+           "RcTableGen X86CommonTableGen");
+    };
     if (!Checkout(SrcRev))
       return 1;
+    Prep();
     Src = getAST(CommonCompilations, SourcePath);
     if (!Checkout(DstRev))
       return 1;
+    Prep();
     Dst = getAST(CommonCompilations, SourcePath);
-    Checkout(UserRev);
+    /* Checkout(UserRev); */
   } else {
     Src = getAST(CommonCompilations, SourcePath);
     Dst = getAST(CommonCompilations, DestinationPath);
   }
 
   if (!Src || !Dst)
     return 1;
 
   diff::ComparisonOptions Options;
   if (MaxSize != -1)
     Options.MaxSize = MaxSize;
   if (!StopAfter.empty()) {
     if (StopAfter == "topdown")
       Options.StopAfterTopDown = true;
     else if (StopAfter == "bottomup")
       Options.StopAfterBottomUp = true;
     else {
       llvm::errs() << "Error: Invalid argument for -stop-diff-after\n";
       return 1;
     }
   }
   diff::SyntaxTree SrcTree(*Src);
   diff::SyntaxTree DstTree(*Dst);
 
   if (!Patch.empty()) {
     auto Target = getAST(CommonCompilations, Patch);
     if (!Target)
       return 1;
     diff::SyntaxTree TargetTree(*Target);
     diff::patch(SrcTree, DstTree, TargetTree, Options, llvm::outs());
     return 0;
   }
 
   diff::ASTDiff Diff(SrcTree, DstTree, Options);
 
   if (HtmlDiff) {
     llvm::outs() << HtmlDiffHeader << "<pre>";
     llvm::outs() << "<div id='L' class='code'>";
     printHtmlForNode(llvm::outs(), Diff, SrcTree, true, SrcTree.getRootId(), 0);
     llvm::outs() << "</div>";
     llvm::outs() << "<div id='R' class='code'>";
     printHtmlForNode(llvm::outs(), Diff, DstTree, false, DstTree.getRootId(),
                      0);
     llvm::outs() << "</div>";
     llvm::outs() << "</pre></div></body></html>\n";
     return 0;
   }
 
   for (diff::NodeId Dst : DstTree) {
     diff::NodeId Src = Diff.getMapped(DstTree, Dst);
     if (PrintMatches && Src.isValid()) {
       llvm::outs() << "Match ";
       printNode(llvm::outs(), SrcTree, Src);
       llvm::outs() << " to ";
       printNode(llvm::outs(), DstTree, Dst);
       llvm::outs() << "\n";
     }
     printDstChange(llvm::outs(), Diff, SrcTree, DstTree, Dst);
   }
   for (diff::NodeId Src : SrcTree) {
     if (Diff.getMapped(SrcTree, Src).isInvalid()) {
       llvm::outs() << "Delete ";
       printNode(llvm::outs(), SrcTree, Src);
       llvm::outs() << "\n";
     }
   }
 
   return 0;
 }
-- 
2.14.1

